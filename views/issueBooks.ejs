<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Issue Book</title>
  <link rel="stylesheet" href="/admindashboard.css">
  <link rel="stylesheet" href="/issueBooks.css">
</head>
<body>

  <!-- Include Header -->
  <%- include('partials/header') %>

  <div class="layout">
    <!-- Include Sidebar -->
    <%- include('partials/sidebar') %>

    <!-- Main Content -->
    <div class="form-container">
      <div class="card shadow-lg p-4 w-100">
        <h2>âž¤ Issue Book</h2>

        <form action="/issueBook" method="POST">
          <!-- Search User -->
          <div class="form-group position-relative">
            <label for="userSearch">Search User (Name or Email)</label>
            <input type="text" class="form-control" id="userSearch" autocomplete="off" required />
            <input type="hidden" name="user_id" id="user_id" required />
            <div id="userSuggestions" class="list-group"></div>
          </div>

          <!-- Search Book -->
          <div class="form-group position-relative">
            <label for="categorySearch">Search Book (Title or Category)</label>
            <input type="text" class="form-control" id="categorySearch" autocomplete="off" required />
            <input type="hidden" name="book_id" id="book_id" required />
            <div id="categorySuggestions" class="list-group"></div>
          </div>

          <!-- Issue & Return Dates -->
          <div class="form-grid">
            <div class="form-group">
              <label for="issue_date">Issue Date</label>
              <input type="date" class="form-control" id="issue_date" name="issue_date" required>
            </div>

            <div class="form-group">
              <label for="return_date">Return Date</label>
              <input type="date" class="form-control" id="return_date" name="return_date" readonly required>
            </div>
          </div>

          <!-- Status -->
          <div class="form-group">
            <label for="status">Status</label>
            <select class="form-select" id="status" name="status" required>
              <option value="">-- Select Status --</option>
              <option value="issued">Issued</option>
            </select>
          </div>

          <div class="form-actions">
            <button type="submit" class="submit-btn">Submit</button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- JS -->
  <script src="/dashboard.js"></script>

  <script>
    // Auto calculate return date
    document.getElementById('issue_date').addEventListener('change', function () {
      const issueDate = new Date(this.value);
      if (!isNaN(issueDate.getTime())) {
        issueDate.setDate(issueDate.getDate() + 7);
        const yyyy = issueDate.getFullYear();
        const mm = String(issueDate.getMonth() + 1).padStart(2, '0');
        const dd = String(issueDate.getDate()).padStart(2, '0');
        document.getElementById('return_date').value = `${yyyy}-${mm}-${dd}`;
      }
    });

    // AJAX: Search Users
    const userSearch = document.getElementById('userSearch');
    const userSuggestions = document.getElementById('userSuggestions');
    const userIdInput = document.getElementById('user_id');

    userSearch.addEventListener('input', async function () {
      const q = this.value.trim();
      if (q.length < 2) {
        userSuggestions.innerHTML = '';
        return;
      }

      try {
        const res = await fetch(`/admin/api/users/search?q=${encodeURIComponent(q)}`);
        const users = await res.json();

        userSuggestions.innerHTML = '';
        users.forEach(user => {
          const item = document.createElement('button');
          item.type = 'button';
          item.className = 'list-group-item list-group-item-action';
          item.textContent = `${user.name} (${user.email})`;
          item.onclick = () => {
            userSearch.value = `${user.name} (${user.email})`;
            userIdInput.value = user.id;
            userSuggestions.innerHTML = '';
          };
          userSuggestions.appendChild(item);
        });
      } catch (err) {
        console.error('User search error:', err);
      }
    });

    // AJAX: Search Books by Category or Title
    const categorySearch = document.getElementById('categorySearch');
    const categorySuggestions = document.getElementById('categorySuggestions');
    const bookIdInput = document.getElementById('book_id');

    categorySearch.addEventListener('input', async function () {
      const q = this.value.trim();
      if (q.length < 2) {
        categorySuggestions.innerHTML = '';
        return;
      }

      try {
        const res = await fetch(`/admin/api/category/search?q=${encodeURIComponent(q)}`);
        const books = await res.json();

        categorySuggestions.innerHTML = '';
        books.forEach(book => {
          const item = document.createElement('button');
          item.type = 'button';
          item.className = 'list-group-item list-group-item-action';
          item.textContent = `${book.title} (${book.isbn})`;
          item.onclick = () => {
            categorySearch.value = `${book.title} (${book.isbn})`;
            bookIdInput.value = book.id;
            categorySuggestions.innerHTML = '';
          };
          categorySuggestions.appendChild(item);
        });
      } catch (err) {
        console.error('Book search error:', err);
      }
    });
  </script>

</body>
</html>
